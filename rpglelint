#!/usr/bin/env perl

=head1 NAME

rpglelint - Lint ILE/RPG Programs

=head1 SYNOPSIS

rpglelint [I<OPTIONS>]... [I<FILE>]...

=head1 DESCRIPTION

rpglelint will lint ILE/RPG programs

Mandatory arguments to long options are mandatory for short options too.

=head2 Options

=over 4

=item B<-I>, B<--include>=I<glob>

a file glob with directories that will be searched for included files, see
B<INCLUDE DIRECTORIES>

=item B<-f>, B<--format>=I<format>

output format, either B<unix>, or B<json>

=item B<-W>I<name>

set the warning I<name>, see B<WARNINGS> for a complete list of warnings

=item B<--dump>

dump the parsed tree

=item B<--dump-file-only>

dump the parsed tree, but exclude all included files

=item B<-h>, B<--help>

show help and exit

=back

=head1 WARNINGS

Enable a warning by using B<-W>I<name>, and disable it by using B<-Wno->I<name>

Warnings enabled by B<-Wall>, and B<-Wextra> will be marked with B<[-Wall]> and
B<[-Wextra]>.

=over 4

=item B<-Wglobal>

warn about global declarations

=item B<-Windicator> [-Wall]

warn about usage of indicators such as B<*INLR> and B<*IN01>

=item B<-Wparameter-mismatch> [-Wall]

warn when a B<DCL-PROC> does not match the B<DCL-PR>

=item B<-Wqualified> [-Wall]

warn when data structures are not qualified

=item B<-Wredefining-symbol> [-Wall]

warn when a symbol is redefined

=item B<-Wsame-casing> [-Wextra]

warn when a declaration is referenced with another casing than it is declared

=item B<-Wshadow>

warn when a global declaration is shadowed by a local declaration

=item B<-Wsubroutine>

warn when subroutines are used

=item B<-Wundefined-reference> [-Wall]

warn when a symbol is referred but not declared

=item B<-Wunreachable-code>

warn when code will never be reached

=item B<-Wunused-parameter> [-Wextra]

warn when a parameter is never referred

=item B<-Wunused-procedure> [-Wextra]

warn when a static procedure is never called

=item B<-Wunused-subroutine> [-Wextra]

warn when a subroutine is never executed

=item B<-Wunused-variable> [-Wextra]

warn when a declaration is never referred

=item B<-Wuppercase-constant> [-Wall]

warn when a constant (defined with B<DCL-C>) is not all uppercase

=item B<-Wuppercase-indicator> [-Wall]

warn when an indicator (including
B<*BLANK>,
B<*BLANKS>,
B<*CDMY>,
B<*CMDY>,
B<*CYMD>,
B<*DMY>,
B<*EUR>,
B<*EUR>,
B<*HMS>,
B<*ISO0>,
B<*ISO>,
B<*JIS>,
B<*JOBRUN>,
B<*JUL>,
B<*LONGJUL>,
B<*MDY>,
B<*OFF>,
B<*OMIT>,
B<*ON>,
B<*USA>,
B<*USA>,
and
B<*YMD>) is not all uppercase

=back

=head1 INCLUDE DIRECTORIES

The following will happen to included files when searched for existence:

The current files directory followed by all include directories will be scanned,
from first added to last:

The checks are the following:

=over 4

=item

The filename will be checked

=item

The filename will be lowercased

=item

B<.rpgleinc> will be appended to the filename

=item

the filename will be lowercased and B<.rpgleinc> will be appended

=item

B<.mbr> will be appended to the filename

=item

the filename will be lowercased and B<.mbr> will be appended

=back

The first B</> in the filename will be substituted with B<.lib/>, and the first
B<,> will be substituted with B<.file/>.

The list above will now we checked again with the modified filename, before
moving on to the next include directory.

=head1 ENVIRONMENT VARIABLES

The following environment variables are read and used by rpglelint as described.

=over 4

=item B<RPGLELINT>

options which are passed to I<rpglelint> automatically

=item B<RPGLELINT_INCLUDE>

a file glob with directories that will be searched for included files, see
B<INCLUDE DIRECTORIES>

=back

=head1 SEE ALSO

B<rpglectags>(1)

=head1 AUTHOR

Andreas Louv <andreas@louv.dk>.

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.

=cut

use strict;
use warnings;
use v5.16;

use Getopt::Long qw{ GetOptionsFromArray :config no_ignore_case gnu_compat bundling };
use Pod::Usage;

use RPG::Parser;
use RPG::Linter;
use JSON;

our $PGM = "rpglelint";
our $VERSION = "0.8.10";

my $parser = RPG::Parser->new;
my $linter = RPG::Linter->new;

my $fdump = 0;
my $fdumpfile = 0;
my $format = ''; # default is unix

sub parseopts
{
  my ($opts) = @_;

  GetOptionsFromArray($opts,
    'f|format=s' => \$format,
    '--dump' => \$fdump,
    '--dump-file-only' => \$fdumpfile,
    'I|include=s' => sub {
      my ($name, $value) = @_;
      push(@{$parser->{include}}, glob($value));
    },
    'W=s' => sub {
      my ($name, $rule) = @_;
      $linter->setrule($rule);
    },
    'V|version' => sub {
      printf("%s %s\n", $PGM, $VERSION);
      exit(0);
    },
    'h|help' => sub {
      pod2usage( -verbose => 99, -sections => "SYNOPSIS|DESCRIPTION|WARNINGS" );
      exit(0);
    }
  ) or exit(2);
}

if (defined $ENV{RPGLELINT_INCLUDE}) {
  push(@{$parser->{include}}, glob($_)) for split(/:/, $ENV{RPGLELINT_INCLUDE});
}

if (defined $ENV{RPGLELINT}) {
  my @argv = split(/\s+/, $ENV{RPGLELINT});
  parseopts(\@argv);
}

parseopts(\@ARGV);
$parser->{parseopts} = \&parseopts;

@ARGV = ('-') if @ARGV < 1;

for my $file (@ARGV) {
  my $scope = $parser->parse($file);
  if ($fdump || $fdumpfile) {
    my $dump = $parser->serialize($scope);
    if ($fdumpfile) {
      my $len = @{$dump->{declarations}};
      for (my $i = 0; $i < $len; $i++) {
        my $decl = $dump->{declarations}->[$i];
        if ($decl->{file} ne $file) {
          splice(@{$dump->{declarations}}, $i, 1);
          $len--;
          $i--;
        }
      }
    }
    my $json = JSON->new;
    $json->indent(2);
    $json->canonical(1);
    print $json->encode($dump);
  }
  else {
    my $errors = $linter->lint($scope);
    if ($format eq "json") {
      $linter->print_json($errors);
    }
    else {
      $linter->print_unix($errors);
    }
  }
}
